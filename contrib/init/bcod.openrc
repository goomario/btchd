#!/sbin/openrc-run

# backward compatibility for existing gentoo layout 
#
if [ -d "/var/lib/bco/.bco" ]; then
	BCOD_DEFAULT_DATADIR="/var/lib/bco/.bco"
else
	BCOD_DEFAULT_DATADIR="/var/lib/bcod"
fi

BCOD_CONFIGFILE=${BCOD_CONFIGFILE:-/etc/bco/bco.conf}
BCOD_PIDDIR=${BCOD_PIDDIR:-/var/run/bcod}
BCOD_PIDFILE=${BCOD_PIDFILE:-${BCOD_PIDDIR}/bcod.pid}
BCOD_DATADIR=${BCOD_DATADIR:-${BCOD_DEFAULT_DATADIR}}
BCOD_USER=${BCOD_USER:-${BCO_USER:-bco}}
BCOD_GROUP=${BCOD_GROUP:-bco}
BCOD_BIN=${BCOD_BIN:-/usr/bin/bcod}
BCOD_NICE=${BCOD_NICE:-${NICELEVEL:-0}}
BCOD_OPTS="${BCOD_OPTS:-${BCO_OPTS}}"

name="BCO Core Daemon"
description="BCO cryptocurrency P2P network daemon"

command="/usr/bin/bcod"
command_args="-pid=\"${BCOD_PIDFILE}\" \
		-conf=\"${BCOD_CONFIGFILE}\" \
		-datadir=\"${BCOD_DATADIR}\" \
		-daemon \
		${BCOD_OPTS}"

required_files="${BCOD_CONFIGFILE}"
start_stop_daemon_args="-u ${BCOD_USER} \
			-N ${BCOD_NICE} -w 2000"
pidfile="${BCOD_PIDFILE}"

# The retry schedule to use when stopping the daemon. Could be either
# a timeout in seconds or multiple signal/timeout pairs (like
# "SIGKILL/180 SIGTERM/300")
retry="${BCOD_SIGTERM_TIMEOUT}"

depend() {
	need localmount net
}

# verify
# 1) that the datadir exists and is writable (or create it)
# 2) that a directory for the pid exists and is writable
# 3) ownership and permissions on the config file
start_pre() {
	checkpath \
	-d \
	--mode 0750 \
	--owner "${BCOD_USER}:${BCOD_GROUP}" \
	"${BCOD_DATADIR}"

	checkpath \
	-d \
	--mode 0755 \
	--owner "${BCOD_USER}:${BCOD_GROUP}" \
	"${BCOD_PIDDIR}"

	checkpath -f \
	-o ${BCOD_USER}:${BCOD_GROUP} \
	-m 0660 \
	${BCOD_CONFIGFILE}

	checkconfig || return 1
}

checkconfig()
{
	if ! grep -qs '^rpcpassword=' "${BCOD_CONFIGFILE}" ; then
		eerror ""
		eerror "ERROR: You must set a secure rpcpassword to run bcod."
		eerror "The setting must appear in ${BCOD_CONFIGFILE}"
		eerror ""
		eerror "This password is security critical to securing wallets "
		eerror "and must not be the same as the rpcuser setting."
		eerror "You can generate a suitable random password using the following "
		eerror "command from the shell:"
		eerror ""
		eerror "bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'"
		eerror ""
		eerror "It is recommended that you also set alertnotify so you are "
		eerror "notified of problems:"
		eerror ""
		eerror "ie: alertnotify=echo %%s | mail -s \"BCO Alert\"" \
			"admin@foo.com"
		eerror ""
		return 1
	fi
}
